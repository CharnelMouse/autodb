% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/relation_schema.r
\name{relation_schema}
\alias{relation_schema}
\title{Relation schema vectors}
\usage{
relation_schema(schemas, all_attrs, unique = TRUE)
}
\arguments{
\item{schemas}{a named list of schemas, in the form of two-element lists: the
first element contains a character vector of all attributes in the relation
schema, and the second element contains a list of character vectors,
each representing a candidate key.}

\item{all_attrs}{a character vector, giving the names of all attributes.
These need not be present in \code{schemas}, but all attributes in
\code{schemas} must be present in \code{all_attrs}.}

\item{unique}{a logical, TRUE by default, for whether to remove duplicate
schemas.}
}
\value{
A \code{relation_schema} object, containing the list given in
\code{schemas}, with \code{all_attrs} stored in an attribute of the same
name. Relation schemas are returned with their keys' attributes sorted
according to the attribute order in \code{all_attrs}, and the keys then
sorted by priority order. Attributes in the schema are also sorted, first
by order of appearance in the sorted keys, then by order in
\code{all_attrs} for non-prime attributes.
}
\description{
Creates a set of relation schemas, including the relation's attributes and
candidate keys.
}
\details{
When several sets of relation schemas are concatenated, their
\code{all_attrs} attributes are merged, so as to preserve all of the original
attribute orders, if possible. If this is not possible, because the orderings
disagree, then the returned value of the \code{all_attrs} attribute is their
union instead.
}
\examples{
schemas <- relation_schema(
  list(a = list(c("a", "b"), list("a")), b = list(c("b", "c"), list("b", "c"))),
  all_attrs = c("a", "b", "c", "d")
)
print(schemas)
attrs(schemas)
keys(schemas)
all_attrs(schemas)
names(schemas)
}
\seealso{
\code{\link{attrs}}, \code{\link{keys}}, and \code{\link{all_attrs}}
for extracting parts of the information in a \code{relation_schema}.
}
