% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/autodb-package.r, R/autodb.r
\docType{package}
\name{autodb}
\alias{autodb}
\title{Database-style normalisation for data.frames}
\usage{
autodb(
  df,
  name = NA_character_,
  ensure_lossless = TRUE,
  remove_avoidable = FALSE,
  constants_name = "constants",
  progress = FALSE,
  progress_file = "",
  ...
)
}
\arguments{
\item{df}{a data.frame, containing the data to be normalised.}

\item{name}{a scalar character, giving the name of the database. This name
is used for the resulting graph when using \code{\link{gv.database}}, to
allow for easier combining of graphs into a single diagram if required.}

\item{ensure_lossless}{a logical, indicating whether to check whether the
normalisation is lossless. If it is not, then an additional relation is
added to the final "database", containing a key for \code{df}. This is
enough to make the normalisation lossless.}

\item{remove_avoidable}{a logical, indicating whether to remove avoidable
attributes in relations. If so, then an attribute are removed from
relations if the keys can be changed such that it is not needed to preserve
the given functional dependencies.}

\item{constants_name}{a scalar character, giving the name for any relation
created to store constant attributes. If this is the same as a generated
relation name, it will be changed, with a warning, to ensure that all
relations have a unique name.}

\item{progress}{a logical, for whether to display progress to the user during
dependency search in \code{\link{discover}} and normalisation in
\code{\link{normalise}}.}

\item{progress_file}{a scalar character or a connection. If \code{progress}
is non-zero, determines where the progress is written to, in the same way
as the \code{file} argument for \code{\link[base]{cat}}.}

\item{...}{further arguments passed on to \code{\link{discover}}.}
}
\value{
A database, represented by a list of three elements. See
\code{\link{decompose}} for details.
}
\description{
Automatic normalisation of a data.frame to third normal form, with the
intention of easing the process of data cleaning. (Usage to design your
actual database for you is not advised.) Originally inspired by Alteryx's
AutoNormalize Python library (https://github.com/alteryx/autonormalize), with
various changes and improvements. Automatic discovery of functional or
approximate dependencies, normalisation based on those, and plotting of the
resulting "database" via Graphviz, with options to exlude some attributes at
discovery time, or remove discovered dependencies at normalisation time.

This is a wrapper function for applying \code{\link{discover}},
\code{\link{normalise}}, \code{\link{cross_reference}}, and
\code{\link{decompose}}, in order.
}
\details{
Since \code{decompose} only works with functional dependencies, not approximate
dependencies, the accuracy in \code{discover} is fixed as 1.
}
\examples{
# simple example
autodb(ChickWeight)
}
