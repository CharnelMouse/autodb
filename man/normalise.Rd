% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalise.r
\name{normalise}
\alias{normalise}
\title{Normalises dependency relationships}
\usage{
normalise(
  dependencies,
  remove_avoidable = FALSE,
  constants_name = "constants",
  progress = FALSE,
  progress_file = ""
)
}
\arguments{
\item{dependencies}{a list of functional dependencies, as given by
\code{\link{search}}: each dependency is a list, containing one character
vector for the determinant set, and one unit-length character vector for
the dependent.}

\item{remove_avoidable}{a logical, indicating whether to remove avoidable
attributes in relations. If so, then an attribute are removed from
relations if the keys can be changed such that it is not needed to preserve
the given functional dependencies.}

\item{constants_name}{a scalar character, giving the name for any relation
created to store constant attributes. If this is the same as a generated
relation name, it will be changed, with a warning, to ensure that all
relations have a unique name.}

\item{progress}{a logical, for whether to display progress to the user during
dependency search in \code{\link{search}} and normalisation in
\code{\link{normalise}}.}

\item{progress_file}{a scalar character or a connection. If \code{progress}
is non-zero, determines where the progress is written to, in the same way
as the \code{file} argument for \code{\link[base]{cat}}.}
}
\value{
A database schema, represented by a named list of two lists and two
character vectors:
\itemize{
\item \code{attrs} elements contain the attributes present in the
relation schemas, with attributes in keys given first.
\item \code{keys} elements contain a list of the candidate keys for the
relation schemas.
\item \code{all_attrs} is a character vector, containing all attribute
names in priority order for placement and key ordering, i.e. as ordered
in the original data frame.
\item \code{relation_names} is a character vector, containing the names
of the relation schemas
}
The lists and the \code{relation_names} vector are of equal length,
representing relation schemas.
}
\description{
Normalises the dependency relationships in dependencies into a database
schema satisfying at least third normal form, using Bernstein's synthesis.
}
\details{
Bernstein's synthesis is a synthesis algorithm for normalisation of a set of
dependencies into a set of relations that are in third normal form. This
implementation is based on the version given in the referenced paper.

The implementation also includes a common additional step, to ensure that the
resulting decomposition is lossless, i.e. a relation satisfying the given
dependencies can be perfectly reconstructed from the relations given by the
decomposition. This is done by adding an additional relation, containing a
key for all the original attributes, if one is not already present.

Constant attributes, i.e. those whose only determinant set is empty, get
assigned to a relation with no keys.

Relation names are adjusted for uniqueness after synthesis.
}
\references{
3NF synthesis algorithm: Bernstein P. A. (1976) Synthesizing third normal
form relations from functional dependencies. \emph{ACM Trans. Database Syst.},
\strong{1, 4}, 277--298.

Removal of avoidable attributes: Ling T., Tompa F. W., Kameda T. (1981) An
improved third normal form for relational databases. \emph{ACM Trans. Database
Syst.}, \strong{6, 2}, 329--346.
}
