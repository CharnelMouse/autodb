% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/normalise.r
\name{normalise}
\alias{normalise}
\title{Create normalised database schemas from functional dependencies}
\usage{
normalise(
  dependencies,
  ensure_lossless = TRUE,
  remove_avoidable = FALSE,
  constants_name = "constants",
  progress = FALSE,
  progress_file = ""
)
}
\arguments{
\item{dependencies}{a \code{\link{functional_dependency}} object, as given by
\code{\link{discover}}.}

\item{ensure_lossless}{a logical, TRUE by default. If TRUE, and the
decomposition isn't lossless, an extra relation is added to make the
decomposition lossless.}

\item{remove_avoidable}{a logical, indicating whether to remove avoidable
attributes in relations. If so, then an attribute are removed from
relations if the keys can be changed such that it is not needed to preserve
the given functional dependencies.}

\item{constants_name}{a scalar character, giving the name for any relation
created to store constant attributes. If this is the same as a generated
relation name, it will be changed, with a warning, to ensure that all
relations have a unique name.}

\item{progress}{a logical, for whether to display progress to the user during
dependency search in \code{\link{discover}}.}

\item{progress_file}{a scalar character or a connection. If \code{progress}
is non-zero, determines where the progress is written to, in the same way
as the \code{file} argument for \code{\link[base]{cat}}.}
}
\value{
A database schema with foreign key references, represented by a named
list of three lists and two character vectors, with the first four having
equal length and representing relation schemas:
\itemize{
\item \code{attrs} elements contain the attributes present in the
relation schemas, with attributes in keys given first.
\item \code{keys} elements contain a list of the candidate keys for the
relation schemas.
\item \code{parents} elements contain integers, representing a relation
schema's parent relation schemas by their position in the paired lists.
\item \code{relationships} contains a list of relationships, each
represented by a list containing two elements. In order, the elements
are a two-length integer vector, giving the positions of the child and
parent relation schemas, and a scalar character, giving the name of the
linked attribute in both relation schemas.
\item \code{relation_names} is a character vector, containing the names
of the relation schemas
\item \code{all_attrs} is a character vector, containing all attribute
names in priority order for placement and key ordering, i.e. as ordered
in the original data frame.
}
}
\description{
Creates a database schema from given functional dependencies, satisfying at
least third normal form, using Bernstein's synthesis.
}
\details{
This is a wrapper function for applying \code{\link{synthesise}} and
\code{\link{cross_reference}}, in order. For creating relation schemas and
foreign key references separately, use these functions directly.

For details on the synthesis algorithm used, see \code{\link{synthesise}}.
}
