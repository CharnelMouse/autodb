% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/database_schema.r
\name{database_schema}
\alias{database_schema}
\title{Database schemas}
\usage{
database_schema(relations, relationships)
}
\arguments{
\item{relations}{a \code{relation_schema} object, as returned by
\code{\link{synthesise}} or \code{\link{relation_schema}}.}

\item{relationships}{a list of relationships, each
represented by a list containing four character elements. In order, the
elements are a scalar giving the name of the child schema, a vector giving
the child attribute names, a scalar giving the name of the parent schema,
and a vector giving the parent attribute names. The vectors must be of the
same length and contain names for attributes present in their respective
schemas, and the parent attributes must form a key, in order.}
}
\value{
A database schema with relationships, represented by a named list of
three lists and two character vectors, with the first four having equal
length and representing relation schemas:
\itemize{
\item \code{attrs} elements contain the attributes present in the
relation schemas, with attributes in keys given first.
\item \code{keys} elements contain a list of the candidate keys for the
relation schemas.
\item \code{relationships} contains the \code{relationships} argument.
\item \code{relation_names} is a character vector, containing the names
of the relation schemas
\item \code{attrs_order} is a character vector, containing all attribute
names in priority order for placement and key ordering, i.e. as ordered
in the original data frame.
}
}
\description{
Enhances a \code{relation_schema} object with foreign key reference
information.
}
\details{
Unlike \code{\link{functional_dependency}} and \code{\link{relation_schema}},
\code{database_schema} is not designed to be vector-like: it only holds a
single database schema. This adheres to the usual package use case, where a
single data frame is being analysed at a time. However, it inherits from
\code{\link{relation_schema}}, so is vectorised with respect to its relation
schemas.

As with \code{\link{relation_schema}}, duplicate relation schemas, after
ordering by attribute, are allowed, and can be removed with
\code{\link{unique}}.

Relationships, i.e. foreign key references, are allowed to have different
attribute names in the child and parent relations; this can't occur in the
output for \code{\link{cross_reference}} and \code{\link{normalise}}.

Subsetting removes any relationships that involve removed relation schemas.
Removing duplicates with \code{\link{unique}} changes relationships involving
duplicates to involve the kept equivalent schemas instead.
}
